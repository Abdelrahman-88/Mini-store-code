{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport jwtDecode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(_HttpClient, _Router) {\n      this._HttpClient = _HttpClient;\n      this._Router = _Router;\n      this.url = 'http://localhost:3000/users/';\n      this.userData = new BehaviorSubject(null);\n\n      if (localStorage.getItem(\"userToken\")) {\n        this.saveUserData();\n        this.userData.subscribe(res => {\n          this.id = res === null || res === void 0 ? void 0 : res._id;\n        });\n      }\n    }\n\n    register(data) {\n      return this._HttpClient.post(`${this.url}register`, data);\n    }\n\n    login(data) {\n      return this._HttpClient.post(`${this.url}login`, data);\n    }\n\n    googleLogin(data) {\n      return this._HttpClient.post(`${this.url}google`, data);\n    }\n\n    forgetPassword(data) {\n      return this._HttpClient.post(`${this.url}resetLink`, data);\n    }\n\n    verify(term, token) {\n      return this._HttpClient.get(`${this.url}${term}/${token}`);\n    }\n\n    resendVerificationLink(id) {\n      return this._HttpClient.get(`${this.url}reSend/${id}`);\n    }\n\n    updateProfile(data) {\n      this.getToken();\n      return this._HttpClient.patch(`${this.url}updateProfile/${this.id}`, data, {\n        headers: this.headers\n      });\n    }\n\n    updatePassword(data) {\n      this.getToken();\n      return this._HttpClient.patch(`${this.url}updatePassword/${this.id}`, data, {\n        headers: this.headers\n      });\n    }\n\n    changePassword(data) {\n      this.getChangeData();\n      return this._HttpClient.patch(`${this.url}changePassword/${this.id}`, data, {\n        headers: this.headers\n      });\n    }\n\n    changeSocialPassword(data) {\n      this.getToken();\n      return this._HttpClient.patch(`${this.url}changePassword/${this.id}`, data, {\n        headers: this.headers\n      });\n    }\n\n    saveUserData() {\n      let codedUserData = JSON.stringify(localStorage.getItem(\"userToken\"));\n\n      try {\n        this.userData.next(jwtDecode(codedUserData));\n        this.userData.subscribe(res => {\n          this.id = res === null || res === void 0 ? void 0 : res._id;\n        });\n      } catch (error) {\n        localStorage.removeItem(\"userToken\");\n\n        this._Router.navigate([\"/login\"]);\n      }\n    }\n\n    getToken() {\n      if (localStorage.getItem(\"userToken\")) {\n        const token = localStorage.getItem(\"userToken\");\n        this.headers = {\n          'Authorization': `Bearer ${token}`\n        };\n      }\n    }\n\n    getChangeData() {\n      if (localStorage.getItem(\"changeToken\")) {\n        const token = localStorage.getItem(\"changeToken\");\n        this.headers = {\n          'Authorization': `Bearer ${token}`\n        };\n        let codedUserData = JSON.stringify(localStorage.getItem(\"changeToken\"));\n        let decodedUserData = jwtDecode(codedUserData);\n        this.id = decodedUserData === null || decodedUserData === void 0 ? void 0 : decodedUserData._id;\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}